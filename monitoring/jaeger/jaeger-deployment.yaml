# Jaeger Tracing Deployment for Kubernetes
apiVersion: v1
kind: Namespace
metadata:
  name: jaeger
  labels:
    name: jaeger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: jaeger

---
# Jaeger All-in-One Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "16686"
    spec:
      serviceAccountName: jaeger
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one:1.49
          args:
            - --memory.max-traces=50000
            - --query.base-path=/jaeger/ui
          ports:
            - containerPort: 16686
              protocol: TCP
              name: query
            - containerPort: 14268
              protocol: TCP  
              name: collector
            - containerPort: 14250
              protocol: TCP
              name: grpc
            - containerPort: 6831
              protocol: UDP
              name: jaeger-thrift
            - containerPort: 6832
              protocol: UDP
              name: jaeger-binary
            - containerPort: 5778
              protocol: TCP
              name: config-rest
            - containerPort: 5775
              protocol: UDP
              name: zipkin-thrift
          env:
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
            - name: COLLECTOR_OTLP_GRPC_HOST_PORT
              value: ":4317"
            - name: COLLECTOR_OTLP_HTTP_HOST_PORT
              value: ":4318"
            - name: QUERY_BASE_PATH
              value: /jaeger
            - name: SPAN_STORAGE_TYPE
              value: "memory"
            - name: MEMORY_MAX_TRACES
              value: "50000"
            - name: SAMPLING_STRATEGIES_FILE
              value: "/etc/jaeger/sampling_strategies.json"
          volumeMounts:
            - name: sampling-config
              mountPath: /etc/jaeger
              readOnly: true
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          readinessProbe:
            httpGet:
              path: "/"
              port: 14269
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: "/"
              port: 14269
            initialDelaySeconds: 10
      volumes:
        - name: sampling-config
          configMap:
            name: jaeger-sampling-strategies

---
# Jaeger Sampling Strategies Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-sampling-strategies
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  sampling_strategies.json: |
    {
      "default_strategy": {
        "type": "probabilistic",
        "param": 1.0
      },
      "per_service_strategies": [
        {
          "service": "java-microservice-backend",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100,
          "per_operation_strategies": [
            {
              "operation": "GET /api/users",
              "type": "probabilistic",
              "param": 0.8
            },
            {
              "operation": "POST /api/users", 
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "database-query",
              "type": "probabilistic", 
              "param": 1.0
            }
          ]
        },
        {
          "service": "java-microservice-frontend",
          "type": "probabilistic",
          "param": 0.8,
          "max_traces_per_second": 50,
          "per_operation_strategies": [
            {
              "operation": "page-load",
              "type": "probabilistic",
              "param": 0.5
            },
            {
              "operation": "api-call",
              "type": "probabilistic", 
              "param": 1.0
            }
          ]
        },
        {
          "service": "nginx-proxy",
          "type": "probabilistic",
          "param": 0.3,
          "max_traces_per_second": 25
        },
        {
          "service": "postgresql",
          "type": "probabilistic", 
          "param": 0.7,
          "max_traces_per_second": 75
        },
        {
          "service": "redis-cache",
          "type": "probabilistic",
          "param": 0.5,
          "max_traces_per_second": 50
        }
      ]
    }

---
# Jaeger Query Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  ports:
    - name: query-http
      port: 80
      protocol: TCP
      targetPort: 16686
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
  type: ClusterIP

---
# Jaeger Collector Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  ports:
    - name: jaeger-collector-tchannel
      port: 14267
      protocol: TCP
      targetPort: 14267
    - name: jaeger-collector-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: jaeger-collector-grpc
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: jaeger-collector-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one
  type: ClusterIP

---
# Jaeger Agent Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: agent
spec:
  ports:
    - name: agent-zipkin-thrift
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: agent-compact
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: agent-binary
      port: 6832
      protocol: UDP
      targetPort: 6832
    - name: agent-configs
      port: 5778
      protocol: TCP
      targetPort: 5778
  clusterIP: None
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: all-in-one

---
# Jaeger Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-query
  namespace: jaeger
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/load-balancer-name: jaeger-alb
spec:
  rules:
  - host: jaeger.internal.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 80

---
# Jaeger ConfigMap for Production Settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: jaeger
  labels:
    app: jaeger
    app.kubernetes.io/name: jaeger
data:
  sampling_strategies.json: |
    {
      "service_strategies": [
        {
          "service": "java-microservice",
          "type": "probabilistic",
          "param": 0.1
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.01
      },
      "per_operation_strategies": [
        {
          "service": "java-microservice",
          "operation": "GET /health",
          "type": "probabilistic",
          "param": 0.001
        }
      ]
    }