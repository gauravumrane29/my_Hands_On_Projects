---
- hosts: all
  become: true
  vars:
    target_env: "{{ target_env | default('dev') }}"
    app_version: "{{ app_version | default('latest') }}"
    java_version: "17"
    app_user: "appuser"
    app_dir: "/opt/java-microservice"
    
    # Database configuration
    db_host: "{{ hostvars[inventory_hostname]['db_host'] | default('localhost') }}"
    db_port: "5432"
    db_name: "demoapp"
    db_username: "postgres"
    db_password: "{{ hostvars[inventory_hostname]['db_password'] | default('postgres') }}"
    
    # Redis configuration
    redis_host: "{{ hostvars[inventory_hostname]['redis_host'] | default('localhost') }}"
    redis_port: "6379"
    
    # Application configuration
    backend_port: "8080"
    frontend_port: "3000"
    
    # Docker images (to be updated with actual registry URLs)
    backend_image: "{{ hostvars[inventory_hostname]['backend_image'] | default('java-microservice-backend:latest') }}"
    frontend_image: "{{ hostvars[inventory_hostname]['frontend_image'] | default('java-microservice-frontend:latest') }}"
    
  tasks:
    - name: Update system packages
      yum:
        name: "*"
        state: latest
        update_cache: yes
      tags: [system]

    - name: Install essential packages
      yum:
        name:
          - git
          - wget
          - curl
          - unzip
          - vim
          - htop
          - tree
        state: present
      tags: [system]

    - name: Install Java 17 (Amazon Corretto)
      yum:
        name: java-17-amazon-corretto-devel
        state: present
      tags: [java]

    - name: Set JAVA_HOME environment variable
      lineinfile:
        path: /etc/environment
        line: "JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto"
        create: yes
      tags: [java]

    - name: Install Node.js 18
      shell: |
        curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
        yum install -y nodejs
      args:
        creates: /usr/bin/node
      tags: [nodejs]

    - name: Install PostgreSQL client
      yum:
        name:
          - postgresql15
          - postgresql15-contrib
        state: present
      tags: [database]

    - name: Install Docker
      yum:
        name: docker
        state: present
      tags: [docker]

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'
      tags: [docker]

    - name: Install Nginx
      yum:
        name: nginx
        state: present
      tags: [nginx]

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes
      tags: [docker]

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes
      tags: [app]

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/backend"
        - "{{ app_dir }}/frontend"
        - "{{ app_dir }}/frontend/build"
        - "{{ app_dir }}/config"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/scripts"
        - "/var/log/java-microservice"
      tags: [app]

    - name: Create application environment configuration
      copy:
        content: |
          # Database Configuration
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          DB_NAME={{ db_name }}
          DB_USERNAME={{ db_username }}
          DB_PASSWORD={{ db_password }}
          
          # Redis Configuration
          REDIS_HOST={{ redis_host }}
          REDIS_PORT={{ redis_port }}
          
          # Application Configuration
          SPRING_PROFILES_ACTIVE={{ target_env }}
          SERVER_PORT={{ backend_port }}
          JAVA_OPTS="-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication"
          
          # Frontend Configuration
          REACT_APP_API_URL=http://localhost/api
          
          # Docker Images
          BACKEND_IMAGE={{ backend_image }}
          FRONTEND_IMAGE={{ frontend_image }}
        dest: "{{ app_dir }}/config/application.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
      tags: [config]

    - name: Create Docker Compose configuration
      copy:
        content: |
          version: '3.8'
          services:
            backend:
              image: ${BACKEND_IMAGE}
              container_name: java-microservice-backend
              ports:
                - "{{ backend_port }}:{{ backend_port }}"
              environment:
                - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
                - DB_HOST=${DB_HOST}
                - DB_PORT=${DB_PORT}
                - DB_NAME=${DB_NAME}
                - DB_USERNAME=${DB_USERNAME}
                - DB_PASSWORD=${DB_PASSWORD}
                - REDIS_HOST=${REDIS_HOST}
                - REDIS_PORT=${REDIS_PORT}
                - SERVER_PORT={{ backend_port }}
              volumes:
                - {{ app_dir }}/logs:/app/logs
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:{{ backend_port }}/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped
              networks:
                - app-network

            frontend:
              image: ${FRONTEND_IMAGE}
              container_name: java-microservice-frontend
              ports:
                - "{{ frontend_port }}:80"
              environment:
                - REACT_APP_API_URL=http://localhost/api
              volumes:
                - {{ app_dir }}/frontend/build:/usr/share/nginx/html:ro
              healthcheck:
                test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
                interval: 30s
                timeout: 10s
                retries: 3
              restart: unless-stopped
              networks:
                - app-network
              depends_on:
                - backend

          networks:
            app-network:
              driver: bridge
        dest: "{{ app_dir }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      tags: [config]

    - name: Configure Nginx reverse proxy
      copy:
        content: |
          server {
              listen 80;
              server_name localhost;

              # Frontend (React app)
              location / {
                  proxy_pass http://localhost:{{ frontend_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  # WebSocket support for React dev server
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
              }

              # Backend API
              location /api/ {
                  proxy_pass http://localhost:{{ backend_port }}/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }

              # Health checks
              location /actuator/ {
                  proxy_pass http://localhost:{{ backend_port }}/actuator/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Security headers
              add_header X-Content-Type-Options nosniff;
              add_header X-Frame-Options DENY;
              add_header X-XSS-Protection "1; mode=block";
          }
        dest: "/etc/nginx/conf.d/java-microservice.conf"
        owner: root
        group: root
        mode: '0644'
      notify: restart nginx
      tags: [nginx]

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: restart nginx
      tags: [nginx]

    - name: Create application deployment script
      copy:
        content: |
          #!/bin/bash
          set -e

          echo "Deploying Java Microservice Full-Stack Application..."
          
          # Change to application directory
          cd {{ app_dir }}
          
          # Load environment variables
          source {{ app_dir }}/config/application.env
          
          # Test database connectivity
          echo "Testing database connection..."
          PGPASSWORD="${DB_PASSWORD}" psql -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USERNAME}" -d "${DB_NAME}" -c "\l" || {
              echo "Warning: Database connection failed. Application may not work properly."
          }
          
          # Pull latest images (if using remote registry)
          echo "Pulling Docker images..."
          # docker-compose pull || echo "Could not pull images, using local versions"
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Start applications
          echo "Starting applications..."
          docker-compose up -d
          
          # Wait for backend to be healthy
          echo "Waiting for backend to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
              if curl -f http://localhost:{{ backend_port }}/actuator/health >/dev/null 2>&1; then
                  echo "Backend is ready"
                  break
              fi
              sleep 2
              timeout=$((timeout - 2))
          done
          
          if [ $timeout -le 0 ]; then
              echo "Warning: Backend health check timeout"
          fi
          
          # Check frontend
          echo "Checking frontend..."
          if curl -f http://localhost:{{ frontend_port }} >/dev/null 2>&1; then
              echo "Frontend is ready"
          else
              echo "Warning: Frontend health check failed"
          fi
          
          # Show status
          echo "Application Status:"
          docker-compose ps
          
          echo "Deployment completed!"
          echo "Access the application at: http://$(hostname -I | awk '{print $1}')"
        dest: "{{ app_dir }}/scripts/deploy.sh"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      tags: [deployment]

    - name: Create systemd service for full-stack application
      copy:
        content: |
          [Unit]
          Description=Java Microservice Full-Stack Application
          Requires=docker.service
          After=docker.service network.target

          [Service]
          Type=oneshot
          RemainAfterExit=true
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_dir }}
          EnvironmentFile={{ app_dir }}/config/application.env
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          TimeoutStartSec=300

          [Install]
          WantedBy=multi-user.target
        dest: "/etc/systemd/system/java-microservice.service"
        mode: '0644'
      notify: reload systemd
      tags: [service]

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
      tags: [nginx]

    - name: Enable Java Microservice service
      systemd:
        name: java-microservice
        enabled: yes
        daemon_reload: yes
      tags: [service]

    - name: Display deployment information
      debug:
        msg: |
          Java Microservice Full-Stack Application Configuration Complete!
          
          To deploy the application:
          1. Upload your Docker images or build them locally
          2. Update {{ app_dir }}/config/application.env with correct image names
          3. Run: {{ app_dir }}/scripts/deploy.sh
          4. Or use systemd: systemctl start java-microservice
          
          Configuration:
          - Environment: {{ target_env }}
          - Backend Port: {{ backend_port }}
          - Frontend Port: {{ frontend_port }}
          - Database: {{ db_host }}:{{ db_port }}/{{ db_name }}
          - Redis: {{ redis_host }}:{{ redis_port }}
          
          Access the application at: http://<server-ip>
      tags: [info]

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: Install CloudWatch agent
      yum:
        name: amazon-cloudwatch-agent
        state: present
      tags: [monitoring]

    - name: Create CloudWatch agent configuration
      copy:
        content: |
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "cwagent"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/app/logs/*.log",
                      "log_group_name": "/aws/ec2/{{ target_env }}/application",
                      "log_stream_name": "{instance_id}-app.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "CWAgent",
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "diskio": {
                  "measurement": [
                    "io_time"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
        mode: '0644'
      tags: [monitoring]

    - name: Create application startup script
      copy:
        content: |
          #!/bin/bash
          # Application startup script for {{ target_env }} environment
          
          APP_USER="{{ app_user }}"
          APP_DIR="{{ app_dir }}"
          APP_VERSION="{{ app_version }}"
          JAVA_HOME="/usr/lib/jvm/java-17-amazon-corretto"
          
          # Set environment variables
          export JAVA_HOME=$JAVA_HOME
          export PATH=$JAVA_HOME/bin:$PATH
          export APP_ENV="{{ target_env }}"
          
          # Create log file
          LOG_FILE="$APP_DIR/logs/startup.log"
          touch $LOG_FILE
          chown $APP_USER:$APP_USER $LOG_FILE
          
          echo "$(date): Starting application deployment for version $APP_VERSION" >> $LOG_FILE
          
          # Function to download and deploy application
          deploy_app() {
              echo "$(date): Application deployment script ready" >> $LOG_FILE
              echo "$(date): Environment: {{ target_env }}" >> $LOG_FILE
              echo "$(date): Version: $APP_VERSION" >> $LOG_FILE
              echo "$(date): Java Version: $(java -version 2>&1 | head -1)" >> $LOG_FILE
              
              # Placeholder for actual application deployment
              # This would typically:
              # 1. Download JAR from S3/Nexus/Artifactory
              # 2. Or pull Docker image from ECR
              # 3. Configure application properties
              # 4. Start the application service
              
              echo "$(date): Application ready for deployment" >> $LOG_FILE
          }
          
          # Run deployment
          deploy_app
        dest: "{{ app_dir }}/bin/deploy.sh"
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
      tags: [app]

    - name: Create systemd service for application
      copy:
        content: |
          [Unit]
          Description=Java Application Service ({{ target_env }})
          After=network.target
          After=docker.service
          Requires=docker.service

          [Service]
          Type=notify
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_dir }}
          Environment=JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
          Environment=APP_ENV={{ target_env }}
          Environment=APP_VERSION={{ app_version }}
          ExecStart={{ app_dir }}/bin/deploy.sh
          Restart=always
          RestartSec=10
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=java-app

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/java-app.service
        mode: '0644'
      tags: [app]

    - name: Enable application service (but don't start)
      systemd:
        name: java-app
        enabled: yes
        daemon_reload: yes
      tags: [app]

    - name: Configure log rotation for application
      copy:
        content: |
          {{ app_dir }}/logs/*.log {
              daily
              rotate 7
              compress
              delaycompress
              missingok
              notifempty
              create 644 {{ app_user }} {{ app_user }}
              postrotate
                  /bin/systemctl reload java-app > /dev/null 2>&1 || true
              endscript
          }
        dest: /etc/logrotate.d/java-app
        mode: '0644'
      tags: [app]

    - name: Install additional monitoring tools
      yum:
        name:
          - htop
          - iotop
          - netstat-nat
          - tcpdump
        state: present
      tags: [monitoring]

    - name: Set up custom motd
      copy:
        content: |
          
          ################################################################################
          #                                                                              #
          #   Java Application Server - {{ target_env | upper }} Environment                          #
          #   AMI Built: {{ ansible_date_time.iso8601 }}                                #
          #   Application Version: {{ app_version }}                                     #
          #   Java Version: 17 (Amazon Corretto)                                        #
          #                                                                              #
          #   Application Directory: {{ app_dir }}                                       #
          #   Service: java-app.service                                                  #
          #                                                                              #
          ################################################################################
          
        dest: /etc/motd
        mode: '0644'
      tags: [system]

    - name: Verify Java installation
      command: java -version
      register: java_version_output
      changed_when: false
      tags: [java, verify]

    - name: Verify Docker installation
      command: docker --version
      register: docker_version_output
      changed_when: false
      tags: [docker, verify]

    - name: Display installation summary
      debug:
        msg: |
          AMI Configuration Complete:
          - Environment: {{ target_env }}
          - App Version: {{ app_version }}
          - Java: {{ java_version_output.stderr | default('Not available') }}
          - Docker: {{ docker_version_output.stdout | default('Not available') }}
          - Application User: {{ app_user }}
          - Application Directory: {{ app_dir }}
      tags: [verify]