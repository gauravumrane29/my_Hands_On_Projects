---
# Kubernetes and Container Orchestration Setup Playbook
# Installs and configures Kubernetes, Helm, and container orchestration tools

- name: Install and Configure Kubernetes Ecosystem
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Kubernetes configuration
    k8s_version: "1.28"
    kubectl_version: "v1.28.2"
    helm_version: "v3.13.0"
    
    # Container runtime
    containerd_version: "1.7.0"
    
    # Network plugin
    cni_plugin: "calico"  # Options: calico, flannel, weave
    
    # User configuration
    k8s_user: "{{ ansible_user | default('ubuntu') }}"
    
  tasks:
    # ================================
    # System Preparation
    # ================================
    - name: Disable swap permanently
      lineinfile:
        path: /etc/fstab
        regexp: '^[^#].*swap'
        state: absent
      tags: ["k8s", "system"]

    - name: Disable swap immediately
      command: swapoff -a
      tags: ["k8s", "system"]

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
      tags: ["k8s", "system"]

    - name: Ensure kernel modules load at boot
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
        mode: '0644'
      tags: ["k8s", "system"]

    - name: Configure sysctl parameters for Kubernetes
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: net.bridge.bridge-nf-call-iptables, value: 1 }
        - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
        - { name: net.ipv4.ip_forward, value: 1 }
      tags: ["k8s", "system"]

    # ================================
    # Container Runtime (containerd)
    # ================================
    - name: Install containerd dependencies (Ubuntu/Debian)
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags: ["containerd"]

    - name: Add Docker GPG key (for containerd)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"
      tags: ["containerd"]

    - name: Add Docker repository (for containerd)
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"
      tags: ["containerd"]

    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags: ["containerd"]

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
      tags: ["containerd"]

    - name: Generate default containerd configuration
      shell: containerd config default > /etc/containerd/config.toml
      tags: ["containerd"]

    - name: Configure containerd to use systemd cgroup driver
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
      notify: restart containerd
      tags: ["containerd"]

    - name: Start and enable containerd
      systemd:
        name: containerd
        state: started
        enabled: yes
      tags: ["containerd"]

    # ================================
    # Kubernetes Repository and Installation
    # ================================
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      when: ansible_os_family == "Debian"
      tags: ["k8s"]

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
      when: ansible_os_family == "Debian"
      tags: ["k8s"]

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet={{ k8s_version }}.*
          - kubeadm={{ k8s_version }}.*
          - kubectl={{ k8s_version }}.*
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      tags: ["k8s"]

    - name: Hold Kubernetes packages to prevent upgrades
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == "Debian"
      tags: ["k8s"]

    - name: Start and enable kubelet
      systemd:
        name: kubelet
        state: started
        enabled: yes
      tags: ["k8s"]

    # ================================
    # Initialize Kubernetes Master (only on first master)
    # ================================
    - name: Check if Kubernetes is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf
      tags: ["k8s", "master"]

    - name: Initialize Kubernetes master
      command: >
        kubeadm init
        --pod-network-cidr=192.168.0.0/16
        --service-cidr=10.96.0.0/12
        --kubernetes-version={{ kubectl_version }}
      register: kubeadm_init_result
      when: 
        - inventory_hostname == groups['all'][0]
        - not k8s_admin_conf.stat.exists
      tags: ["k8s", "master"]

    - name: Create .kube directory for regular user
      file:
        path: "/home/{{ k8s_user }}/.kube"
        state: directory
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: '0755'
      when: 
        - inventory_hostname == groups['all'][0]
        - k8s_admin_conf.stat.exists or kubeadm_init_result is defined
      tags: ["k8s", "master"]

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ k8s_user }}/.kube/config"
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: '0644'
        remote_src: yes
      when: 
        - inventory_hostname == groups['all'][0]
        - k8s_admin_conf.stat.exists or kubeadm_init_result is defined
      tags: ["k8s", "master"]

    # ================================
    # Install CNI Network Plugin (Calico)
    # ================================
    - name: Install Calico CNI
      become_user: "{{ k8s_user }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: tigera-operator
      when: 
        - inventory_hostname == groups['all'][0]
        - cni_plugin == "calico"
      tags: ["k8s", "cni"]

    - name: Apply Calico operator
      become_user: "{{ k8s_user }}"
      shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/tigera-operator.yaml
      ignore_errors: yes
      when: 
        - inventory_hostname == groups['all'][0]
        - cni_plugin == "calico"
      tags: ["k8s", "cni"]

    - name: Apply Calico custom resources
      become_user: "{{ k8s_user }}"
      shell: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/custom-resources.yaml
      ignore_errors: yes
      when: 
        - inventory_hostname == groups['all'][0]
        - cni_plugin == "calico"
      tags: ["k8s", "cni"]

    # ================================
    # Install Helm
    # ================================
    - name: Download Helm installation script
      get_url:
        url: https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz
        dest: /tmp/helm-{{ helm_version }}-linux-amd64.tar.gz
        mode: '0644'
      tags: ["helm"]

    - name: Extract Helm
      unarchive:
        src: /tmp/helm-{{ helm_version }}-linux-amd64.tar.gz
        dest: /tmp
        remote_src: yes
      tags: ["helm"]

    - name: Install Helm binary
      copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'
        remote_src: yes
      tags: ["helm"]

    - name: Initialize Helm (add stable repo)
      become_user: "{{ k8s_user }}"
      kubernetes.core.helm_repository:
        name: stable
        repo_url: https://charts.helm.sh/stable
      when: inventory_hostname == groups['all'][0]
      tags: ["helm"]

    # ================================
    # Install kubectl autocompletion and aliases
    # ================================
    - name: Add kubectl completion to bash profile
      lineinfile:
        path: "/home/{{ k8s_user }}/.bashrc"
        line: "{{ item }}"
        create: yes
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
      loop:
        - "source <(kubectl completion bash)"
        - "alias k=kubectl"
        - "complete -F __start_kubectl k"
        - "export KUBECONFIG=/home/{{ k8s_user }}/.kube/config"
      tags: ["k8s", "shell"]

    # ================================
    # Install useful Kubernetes tools
    # ================================
    - name: Install kubectx and kubens
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: '0755'
      loop:
        - url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
          dest: /usr/local/bin/kubectx
        - url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
          dest: /usr/local/bin/kubens
      tags: ["k8s", "tools"]

    - name: Install k9s (Kubernetes CLI dashboard)
      unarchive:
        src: https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz
        dest: /usr/local/bin/
        remote_src: yes
        creates: /usr/local/bin/k9s
        mode: '0755'
      tags: ["k8s", "tools"]

    # ================================
    # Create Kubernetes development namespace
    # ================================
    - name: Create development namespace
      become_user: "{{ k8s_user }}"
      kubernetes.core.k8s:
        name: development
        api_version: v1
        kind: Namespace
        state: present
      when: inventory_hostname == groups['all'][0]
      tags: ["k8s", "namespace"]

    - name: Create staging namespace
      become_user: "{{ k8s_user }}"
      kubernetes.core.k8s:
        name: staging
        api_version: v1
        kind: Namespace
        state: present
      when: inventory_hostname == groups['all'][0]
      tags: ["k8s", "namespace"]

    # ================================
    # Install Ingress Controller (NGINX)
    # ================================
    - name: Install NGINX Ingress Controller
      become_user: "{{ k8s_user }}"
      shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
      when: inventory_hostname == groups['all'][0]
      tags: ["k8s", "ingress"]

    # ================================
    # Create useful ConfigMaps and Secrets examples
    # ================================
    - name: Create example ConfigMap
      become_user: "{{ k8s_user }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: app-config
            namespace: development
          data:
            database_url: "postgresql://localhost:5432/myapp"
            log_level: "INFO"
            feature_flags: |
              enable_new_ui: true
              enable_beta_features: false
      when: inventory_hostname == groups['all'][0]
      tags: ["k8s", "config"]

    # ================================
    # Install monitoring stack (Prometheus + Grafana)
    # ================================
    - name: Add Prometheus community Helm repository
      become_user: "{{ k8s_user }}"
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts
      when: inventory_hostname == groups['all'][0]
      tags: ["monitoring"]

    - name: Install kube-prometheus-stack
      become_user: "{{ k8s_user }}"
      kubernetes.core.helm:
        name: monitoring
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: monitoring
        create_namespace: yes
        values:
          prometheus:
            prometheusSpec:
              retention: 7d
          grafana:
            adminPassword: admin123
            service:
              type: NodePort
              nodePort: 30000
      when: inventory_hostname == groups['all'][0]
      tags: ["monitoring"]

  # ================================
  # Handlers
  # ================================
  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
      tags: ["containerd"]

    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted
      tags: ["k8s"]