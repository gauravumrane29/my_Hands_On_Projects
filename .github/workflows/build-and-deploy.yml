# Full-Stack Build and Deploy Pipeline
# Simple CI/CD pipeline for the full-stack Java microservice application

name: Full-Stack CI-CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'app/**'
      - '.github/workflows/build-and-deploy.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'app/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      deploy_backend:
        description: 'Deploy Backend'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        default: true
        type: boolean

env:
  # Application Configuration
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  APP_NAME: java-microservice
  BACKEND_NAME: java-microservice-backend
  FRONTEND_NAME: java-microservice-frontend
  
  # Container Registry
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}-backend
  FRONTEND_IMAGE: ${{ github.repository }}-frontend

jobs:
  # ==========================================
  # BACKEND BUILD
  # ==========================================
  build-backend:
    name: ☕ Build Backend
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.deploy_backend
    
    services:
      postgres:
        image: postgres:15.4
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: 🏗️ Build Backend Application
        run: |
          cd app
          mvn clean compile -B -V
        
      - name: 🧪 Run Backend Tests
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpass
        run: |
          cd app
          mvn test -B
      
      - name: 📦 Package Backend Application
        run: |
          cd app
          mvn package -DskipTests -B
      
      - name: 📤 Upload Backend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: app/target/*.jar

  # ==========================================
  # FRONTEND BUILD
  # ==========================================
  build-frontend:
    name: ⚛️ Build Frontend
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || inputs.deploy_frontend
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'app/frontend/package-lock.json'

      - name: 📦 Install Frontend Dependencies
        run: |
          cd app/frontend
          npm ci --prefer-offline --no-audit

      - name: 🔍 Run Frontend Linting
        run: |
          cd app/frontend
          npm run lint

      - name: 🧪 Run Frontend Tests
        run: |
          cd app/frontend
          npm run test:coverage

      - name: 🏗️ Build Frontend Application
        run: |
          cd app/frontend
          npm run build
      
      - name: 📤 Upload Frontend Build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: app/frontend/dist

  # ==========================================
  # CONTAINER BUILD
  # ==========================================
  build-containers:
    name: 🐳 Build Containers
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 📥 Download Backend Artifact
        if: github.event_name != 'workflow_dispatch' || inputs.deploy_backend
        uses: actions/download-artifact@v3
        with:
          name: backend-jar
          path: app/target/
      
      - name: 📥 Download Frontend Build
        if: github.event_name != 'workflow_dispatch' || inputs.deploy_frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: app/frontend/dist/
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Build and Push Backend Container
        if: github.event_name != 'workflow_dispatch' || inputs.deploy_backend
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🏗️ Build and Push Frontend Container
        if: github.event_name != 'workflow_dispatch' || inputs.deploy_frontend
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # DEPLOYMENT
  # ==========================================
  deploy:
    name: 🚀 Deploy Full-Stack Application
    runs-on: ubuntu-latest
    needs: [build-containers]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: ${{ inputs.environment || 'development' }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'
      
      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'
        
      - name: 🚀 Deploy Full-Stack Application
        env:
          ENVIRONMENT: ${{ inputs.environment || 'development' }}
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region us-east-1 --name ${ENVIRONMENT}-cluster
          
          # Deploy full-stack application
          helm upgrade --install ${{ env.APP_NAME }} ./deployment/helm/java-microservice \
            --namespace ${ENVIRONMENT} \
            --create-namespace \
            --values ./deployment/helm/java-microservice/values-${ENVIRONMENT}.yaml \
            --set backend.image.repository=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }} \
            --set backend.image.tag=${{ github.sha }} \
            --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }} \
            --set frontend.image.tag=${{ github.sha }} \
            --wait --timeout=10m
      
      - name: 🧪 Health Check
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/${{ env.BACKEND_NAME }} -n ${{ inputs.environment || 'development' }}
          kubectl wait --for=condition=available --timeout=300s deployment/${{ env.FRONTEND_NAME }} -n ${{ inputs.environment || 'development' }}
          
      - name: 📊 Deployment Summary
        run: |
          echo "✅ Full-Stack Deployment completed successfully"
          echo "Environment: ${{ inputs.environment || 'development' }}"
          echo "Backend Image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
          echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"